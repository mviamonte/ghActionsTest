# A workflow to allow terraform actions (init, plan, validate and merge based on PR closed event)

name: TerraformPlan

run-name: Github action for planning for AWS Resources
# When this workflow runs
on:
  # Triggers the workflow based on the following events
  push:
    branches:
      - main
  pull_request:
    paths:
      - '**/*.tf'  # Trigger only when Terraform files change  
    
  # Run the workflow manually
  workflow_dispatch:
#Env variables. I have created a new Project (CI/CD) and a new workspace
env:
  TF_CLOUD_ORGANIZATION: "cloud-bizarre"
  TF_API_TOKEN: "${{ secrets.TF_API_TOKEN }}"
  TF_WORKSPACE: "gha-test"
  CONFIG_DIRECTORY: "./"
  AWS_REGION: "eu-central-1"
  
jobs:
  #Testing the Terraform action
  terraform_steps:
    runs-on: ubuntu-latest
    permissions: write-all
    steps:
      # Checking out the code repo
      - uses: actions/checkout@v3
      
      # Executing a step to follow up the workflow
      - name: Checkout status
        run: echo Checkout is done
      
      - name: Configure AWS credentials
        uses: aws-actions/configure-aws-credentials@v4
        id: aws_creds
        with:
          role-to-assume: arn:aws:iam::076080011360:role/GithubActionsRole
          output-credentials: true
          aws-region: ${{ env.AWS_REGION }}
      - name: List S3 bucket
        id: ls_s3_buckets
        run: |
          aws s3 ls
                  
      - name: AWS Env variables for authentication
        id: set_env_for_aws_provider
        run: | 
          echo "AWS_SESSION_TOKEN=${{ steps.aws_creds.outputs.AWS_SESSION_TOKEN }}" >> $GITHUB_ENV
          echo $AWS_SESSION_TOKEN
          echo $AWS_SESSION_TOKEN > ~./session_token

      #Define the terraform version
      - uses: hashicorp/setup-terraform@v2
        with:
          terraform_version: 1.1.7
      #Set the credentials
      - uses: hashicorp/setup-terraform@v2
        with:
          cli_config_credentials_token: ${{ secrets.TF_API_TOKEN }}
      #Install wrapper script
      - uses: hashicorp/setup-terraform@v2
        with:
          terraform_wrapper: true
          
     #Execute the terraform init command and generate some outputs
      - uses: hashicorp/setup-terraform@v2
      - name: Terraform Init
        id: init
        run: terraform init

      - name: Terraform Plan
        id: plan
        run: terraform plan -out=tfplan
        continue-on-error: false
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
      
      - name: Review Terraform Plan
        id: save_plan
        if: success() && github.event_name == 'pull_request'
        run: terraform show -json tfplan > tfplan.json
        continue-on-error: false
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
      
      - name: Terraform Format
        id: fmt
        run: terraform fmt -recursive
      
      - name: Terraform Validate
        id: validate
        run: terraform validate -no-color
        if: ${{ success() }}
        env:
            step_success: true
      

      #Comments the PR with the output of terraform plan
      - uses: actions/github-script@v6
        if: github.event_name == 'pull_request'
        env:
          PLAN: "terraform\n${{ steps.plan.outputs.stdout }}"
        with:
          github-token: ${{ secrets.GITHUB_TOKEN }}
          script: |
            const output = `#### Terraform Format and Style üñå\`${{ steps.fmt.outcome }}\`
            #### Terraform Initialization ‚öôÔ∏è\`${{ steps.init.outcome }}\`
            #### Terraform Validation ü§ñ\`${{ steps.validate.outcome }}\`
            <details><summary>Validation Output</summary>

            \`\`\`\n
            ${{ steps.validate.outputs.stdout }}
            \`\`\`

            </details>

            #### Terraform Plan üìñ\`${{ steps.plan.outcome }}\`

            <details><summary>Show Plan</summary>

            \`\`\`\n
            ${process.env.PLAN}
            \`\`\`

            </details>

            *Pusher: @${{ github.actor }}, Action: \`${{ github.event_name }}\`, Working Directory: \`${{ env.CONFIG_DIRECTORY }}\`, Workflow: \`${{ github.workflow }}\`*`;

            github.rest.issues.createComment({
              issue_number: context.issue.number,
              owner: context.repo.owner,
              repo: context.repo.repo,
              body: output
            })
      - name: Apply Terraform Changes
        id: apply_the_plan
        #if: success() && github.event_name == 'pull_request' && github.event.action == 'closed'  # Only apply changes when the PR is merged
        #if: steps.validate.outputs.step_success == 'true' && github.event_name == 'pull_request' && github.event.action == 'closed'  # Only apply changes when the PR is merged and validate has been success
        if: github.ref == 'refs/heads/main' && github.event_name == 'push'
        run: terraform apply -input=false tfplan

